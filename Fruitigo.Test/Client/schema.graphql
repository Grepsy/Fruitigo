schema {
  query: Query
  mutation: Mutation
}

type Query {
  stock(where: FruitStockFilterInput order: [FruitStockSortInput!]): [FruitStock!]!
}

type Mutation {
  addStock(input: AddStockInput!): AddStockPayload!
  removeStock(input: RemoveStockInput!): RemoveStockPayload!
}

input FruitStockFilterInput {
  and: [FruitStockFilterInput!]
  or: [FruitStockFilterInput!]
  id: UuidOperationFilterInput
  type: FruitTypeOperationFilterInput
  expiryDate: DateOperationFilterInput
  originCountry: StringOperationFilterInput
  orderPrice: DecimalOperationFilterInput
  quotePrice: DecimalOperationFilterInput
  marginPrice: DecimalOperationFilterInput
  quantityAvailable: IntOperationFilterInput
  stockMutations: ListFilterInputTypeOfStockMutationFilterInput
}

input FruitStockSortInput {
  id: SortEnumType
  type: SortEnumType
  expiryDate: SortEnumType
  originCountry: SortEnumType
  orderPrice: SortEnumType
  quotePrice: SortEnumType
  marginPrice: SortEnumType
  quantityAvailable: SortEnumType
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

input FruitTypeOperationFilterInput {
  eq: FruitType
  neq: FruitType
  in: [FruitType!]
  nin: [FruitType!]
}

input DateOperationFilterInput {
  eq: Date
  neq: Date
  in: [Date]
  nin: [Date]
  gt: Date
  ngt: Date
  gte: Date
  ngte: Date
  lt: Date
  nlt: Date
  lte: Date
  nlte: Date
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input DecimalOperationFilterInput {
  eq: Decimal
  neq: Decimal
  in: [Decimal]
  nin: [Decimal]
  gt: Decimal
  ngt: Decimal
  gte: Decimal
  ngte: Decimal
  lt: Decimal
  nlt: Decimal
  lte: Decimal
  nlte: Decimal
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ListFilterInputTypeOfStockMutationFilterInput {
  all: StockMutationFilterInput
  none: StockMutationFilterInput
  some: StockMutationFilterInput
  any: Boolean
}

enum SortEnumType {
  ASC
  DESC
}

scalar UUID

"The `Date` scalar represents an ISO-8601 compliant date type."
scalar Date

"The `Decimal` scalar type represents a decimal floating-point number."
scalar Decimal

input StockMutationFilterInput {
  and: [StockMutationFilterInput!]
  or: [StockMutationFilterInput!]
  fruitStockId: UuidOperationFilterInput
  timestamp: DateTimeOperationFilterInput
  quantity: IntOperationFilterInput
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

enum FruitType {
  APPLE
  BANANA
  MANGO
  KIWI
}

type FruitStock {
  id: UUID!
  type: FruitType!
  expiryDate: Date!
  originCountry: String!
  orderPrice: Decimal!
  quotePrice: Decimal!
  marginPrice: Decimal!
  quantityAvailable: Int!
  stockMutations: [StockMutation!]!
}

type StockMutation {
  fruitStockId: UUID!
  timestamp: DateTime!
  quantity: Int!
}

input AddStockInput {
  id: UUID!
  quantity: Int!
}

type AddStockPayload {
  fruitStock: FruitStock
}

input RemoveStockInput {
  id: UUID!
  quantity: Int!
}

type RemoveStockPayload {
  fruitStock: FruitStock
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION